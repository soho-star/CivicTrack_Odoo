# CivicTrack Web Application

## üìã Overview

CivicTrack is a community-driven web application that empowers citizens to **report local civic issues** (road damage, garbage collection, water leaks, etc.) and **track their resolution progress**. The platform fosters community engagement by displaying nearby reported issues and enabling transparent communication between citizens and local authorities.

---

## üéØ Core Features

### üåç Location-Based Issue Discovery
- **Proximity Filtering**: View issues within customizable radius (1km, 3km, 5km)
- **Real-time GPS Integration**: Automatic location detection with manual override
- **Interactive Maps**: Pin-point issue locations with reverse geocoding

### üìä Issue Management System
- **Smart Categorization**: Severe, Mild, Low priority levels
- **Status Tracking**: Reported ‚Üí In Progress ‚Üí Resolved workflow
- **Visual Progress Indicators**: Color-coded status displays
- **Comprehensive Issue Details**: Photos, descriptions, location data

### üë• User Authentication & Profiles
- **Secure Registration/Login**: Email and phone verification
- **Personal Dashboard**: Track submitted issues and community activity
- **Role-Based Access**: Citizens and administrators with different permissions

### üì± Responsive Design
- **Mobile-First Approach**: Optimized for smartphones and tablets
- **Cross-Platform Compatibility**: Works seamlessly across all devices
- **Intuitive UI/UX**: Clean, accessible interface design

---

## üîÑ Application Flow

### 1. Landing Page (Public View)
**Navigation**
- **Header**: CivicTrack logo (left) + Login button (right)
- **Filter Bar**: Category, Status, and Distance filters

**Content Area**
- **Issue Grid**: Card-based layout displaying:
  - Issue preview image
  - Title and brief description
  - Color-coded status indicator
  - Distance from user location
  - "View Details" action button
- **Pagination**: Numbered navigation with smooth transitions

### 2. Authentication System

#### Login Page
```
Fields:
‚îú‚îÄ‚îÄ Username/Email
‚îî‚îÄ‚îÄ Password

Actions:
‚îú‚îÄ‚îÄ Login Button
‚îî‚îÄ‚îÄ "New User? Register Here" link
```

#### Registration Page
```
Required Fields:
‚îú‚îÄ‚îÄ Full Name
‚îú‚îÄ‚îÄ Email Address
‚îú‚îÄ‚îÄ Phone Number
‚îú‚îÄ‚îÄ Password
‚îî‚îÄ‚îÄ Confirm Password

Actions:
‚îú‚îÄ‚îÄ Register Button
‚îî‚îÄ‚îÄ "Already registered? Login" link
```

### 3. Authenticated User Dashboard

**Enhanced Navigation**
- **Profile Avatar**: User photo/initials (top-right)
- **Action Button**: "Report New Issue" (prominent placement)

**Content Tabs**
- **All Issues**: Community issues within selected radius
- **My Issues**: Personal submissions with detailed status tracking

### 4. Issue Reporting Workflow

#### Step-by-Step Process
1. **üì∏ Photo Upload**
   - Drag & drop interface
   - Support for 3-5 high-quality images
   - Image preview and management

2. **üìç Location Pinning**
   - Interactive map interface
   - GPS auto-detection with manual adjustment
   - Address auto-completion via reverse geocoding

3. **üè∑Ô∏è Issue Categorization**
   - **Severe**: Emergency/safety issues requiring immediate attention
   - **Mild**: Non-urgent but important community concerns
   - **Low**: Minor issues for future consideration

4. **‚úçÔ∏è Detailed Description**
   - Rich text editor for comprehensive issue reporting
   - Character limits with real-time feedback

5. **‚úÖ Submission & Confirmation**
   - Success notification with tracking ID
   - Automatic addition to "My Issues" dashboard

### 5. Issue Details Page

**Comprehensive Issue View**
- **Image Gallery**: Full-size photo carousel with zoom functionality
- **Status Timeline**: Visual progress tracker with timestamps
- **Location Map**: Embedded interactive map with precise coordinates
- **Activity Feed**: Real-time updates from authorities and community
- **Action Buttons**: Share, bookmark, or report concerns

---

## üõ†Ô∏è Technical Architecture

### Recommended Tech Stack

#### Frontend
- **Framework**: React 18+ with TypeScript
- **Styling**: Tailwind CSS + Headless UI components
- **State Management**: Zustand or Redux Toolkit
- **Routing**: React Router v6

#### Backend & Database
- **Backend-as-a-Service**: Supabase
  - PostgreSQL database with real-time subscriptions
  - Built-in authentication and authorization
  - File storage for image uploads
  - Row-level security policies

#### Maps & Location Services
- **Mapping Library**: Leaflet.js with React-Leaflet
- **Map Tiles**: OpenStreetMap (OSM) for cost-effective solution
- **Geocoding**: OpenStreetMap Nominatim API
- **Location Services**: Browser Geolocation API

#### Additional Integrations
- **Image Processing**: Sharp.js for optimization
- **Push Notifications**: Supabase Edge Functions + Web Push API
- **Analytics**: Supabase Analytics or Google Analytics 4

### Complete Database Schema

```sql
-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "postgis";

-- User roles enum
CREATE TYPE user_role AS ENUM ('citizen', 'admin', 'authority');

-- Issue categories enum
CREATE TYPE issue_category AS ENUM ('severe', 'mild', 'low');

-- Issue status enum
CREATE TYPE issue_status AS ENUM ('reported', 'in_progress', 'resolved', 'rejected');

-- Users table
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    email VARCHAR(255) UNIQUE NOT NULL,
    phone VARCHAR(20),
    name VARCHAR(255) NOT NULL,
    avatar_url TEXT,
    role user_role DEFAULT 'citizen',
    is_verified BOOLEAN DEFAULT FALSE,
    location GEOMETRY(POINT, 4326), -- User's default location
    address TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    last_login TIMESTAMP WITH TIME ZONE
);

-- Issues table
CREATE TABLE issues (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    category issue_category NOT NULL,
    status issue_status DEFAULT 'reported',
    location GEOMETRY(POINT, 4326) NOT NULL, -- Exact issue location
    address TEXT NOT NULL, -- Human readable address
    images TEXT[] DEFAULT '{}', -- Array of image URLs
    upvotes INTEGER DEFAULT 0,
    downvotes INTEGER DEFAULT 0,
    priority_score INTEGER DEFAULT 0, -- Calculated priority
    assigned_to UUID REFERENCES users(id), -- Authority assigned to handle
    estimated_resolution DATE,
    resolved_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Issue images table (normalized approach for better file management)
CREATE TABLE issue_images (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    issue_id UUID NOT NULL REFERENCES issues(id) ON DELETE CASCADE,
    image_url TEXT NOT NULL,
    image_key TEXT NOT NULL, -- Storage key for deletion
    file_size INTEGER,
    mime_type VARCHAR(100),
    upload_order INTEGER DEFAULT 1,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Comments/Activity feed table
CREATE TABLE comments (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    issue_id UUID NOT NULL REFERENCES issues(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    is_official BOOLEAN DEFAULT FALSE, -- Mark official authority responses
    parent_id UUID REFERENCES comments(id), -- For threaded replies
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Status updates/timeline table
CREATE TABLE status_updates (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    issue_id UUID NOT NULL REFERENCES issues(id) ON DELETE CASCADE,
    old_status issue_status,
    new_status issue_status NOT NULL,
    updated_by UUID NOT NULL REFERENCES users(id),
    notes TEXT, -- Optional notes about the status change
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- User votes on issues (for community prioritization)
CREATE TABLE issue_votes (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    issue_id UUID NOT NULL REFERENCES issues(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    vote_type VARCHAR(10) CHECK (vote_type IN ('upvote', 'downvote')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(issue_id, user_id) -- One vote per user per issue
);

-- User bookmarks/saved issues
CREATE TABLE user_bookmarks (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    issue_id UUID NOT NULL REFERENCES issues(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id, issue_id)
);

-- Notifications table
CREATE TABLE notifications (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    issue_id UUID REFERENCES issues(id) ON DELETE CASCADE,
    type VARCHAR(50) NOT NULL, -- 'status_update', 'new_comment', 'issue_resolved', etc.
    title VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    is_read BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Issue categories metadata (for admin management)
CREATE TABLE categories (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(100) UNIQUE NOT NULL,
    description TEXT,
    color_code VARCHAR(7), -- Hex color for UI
    icon VARCHAR(50), -- Icon identifier
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Authority assignments and jurisdictions
CREATE TABLE authority_jurisdictions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    jurisdiction_name VARCHAR(255) NOT NULL,
    boundary GEOMETRY(POLYGON, 4326), -- Geographic boundary
    categories issue_category[] DEFAULT '{}', -- Categories they handle
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Analytics and reporting tables
CREATE TABLE daily_stats (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    date DATE NOT NULL UNIQUE,
    total_issues INTEGER DEFAULT 0,
    new_issues INTEGER DEFAULT 0,
    resolved_issues INTEGER DEFAULT 0,
    active_users INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Indexes for performance optimization
CREATE INDEX idx_issues_location ON issues USING GIST(location);
CREATE INDEX idx_issues_status ON issues(status);
CREATE INDEX idx_issues_category ON issues(category);
CREATE INDEX idx_issues_created_at ON issues(created_at DESC);
CREATE INDEX idx_issues_user_id ON issues(user_id);
CREATE INDEX idx_comments_issue_id ON comments(issue_id);
CREATE INDEX idx_comments_created_at ON comments(created_at DESC);
CREATE INDEX idx_notifications_user_id ON notifications(user_id);
CREATE INDEX idx_notifications_unread ON notifications(user_id, is_read) WHERE is_read = FALSE;
CREATE INDEX idx_users_location ON users USING GIST(location);

-- Row Level Security (RLS) policies for Supabase
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE issues ENABLE ROW LEVEL SECURITY;
ALTER TABLE comments ENABLE ROW LEVEL SECURITY;
ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;

-- RLS Policies
-- Users can read their own data and public profile info of others
CREATE POLICY "Users can view public profiles" ON users
    FOR SELECT USING (TRUE);

CREATE POLICY "Users can update own profile" ON users
    FOR UPDATE USING (auth.uid() = id);

-- Issues are publicly readable, but only owners can update their own
CREATE POLICY "Issues are publicly readable" ON issues
    FOR SELECT USING (TRUE);

CREATE POLICY "Users can create issues" ON issues
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own issues" ON issues
    FOR UPDATE USING (auth.uid() = user_id OR 
                     EXISTS(SELECT 1 FROM users WHERE id = auth.uid() AND role IN ('admin', 'authority')));

-- Comments are publicly readable, users can create and update their own
CREATE POLICY "Comments are publicly readable" ON comments
    FOR SELECT USING (TRUE);

CREATE POLICY "Users can create comments" ON comments
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own comments" ON comments
    FOR UPDATE USING (auth.uid() = user_id);

-- Notifications are private to each user
CREATE POLICY "Users can view own notifications" ON notifications
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can update own notifications" ON notifications
    FOR UPDATE USING (auth.uid() = user_id);

-- Functions for common operations
-- Function to calculate distance between two points
CREATE OR REPLACE FUNCTION calculate_distance(lat1 FLOAT, lng1 FLOAT, lat2 FLOAT, lng2 FLOAT)
RETURNS FLOAT AS $$
BEGIN
    RETURN ST_Distance(
        ST_GeogFromText('POINT(' || lng1 || ' ' || lat1 || ')'),
        ST_GeogFromText('POINT(' || lng2 || ' ' || lat2 || ')')
    ) / 1000; -- Return distance in kilometers
END;
$$ LANGUAGE plpgsql;

-- Function to get issues within radius
CREATE OR REPLACE FUNCTION get_issues_within_radius(
    center_lat FLOAT,
    center_lng FLOAT,
    radius_km FLOAT DEFAULT 5.0,
    issue_status_filter issue_status DEFAULT NULL,
    issue_category_filter issue_category DEFAULT NULL,
    limit_count INTEGER DEFAULT 20,
    offset_count INTEGER DEFAULT 0
)
RETURNS TABLE(
    id UUID,
    title VARCHAR,
    description TEXT,
    category issue_category,
    status issue_status,
    images TEXT[],
    distance_km FLOAT,
    upvotes INTEGER,
    downvotes INTEGER,
    created_at TIMESTAMP WITH TIME ZONE,
    user_name VARCHAR
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        i.id,
        i.title,
        i.description,
        i.category,
        i.status,
        i.images,
        ST_Distance(
            ST_GeogFromText('POINT(' || center_lng || ' ' || center_lat || ')'),
            i.location::geography
        ) / 1000 AS distance_km,
        i.upvotes,
        i.downvotes,
        i.created_at,
        u.name as user_name
    FROM issues i
    JOIN users u ON i.user_id = u.id
    WHERE ST_DWithin(
        ST_GeogFromText('POINT(' || center_lng || ' ' || center_lat || ')'),
        i.location::geography,
        radius_km * 1000
    )
    AND (issue_status_filter IS NULL OR i.status = issue_status_filter)
    AND (issue_category_filter IS NULL OR i.category = issue_category_filter)
    ORDER BY distance_km ASC, i.created_at DESC
    LIMIT limit_count
    OFFSET offset_count;
END;
$$ LANGUAGE plpgsql;

-- Trigger to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply the trigger to relevant tables
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_issues_updated_at BEFORE UPDATE ON issues
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_comments_updated_at BEFORE UPDATE ON comments
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
```

### Optimal Project Folder Structure

```
CivicTrack/
‚îú‚îÄ‚îÄ üìÅ frontend/                          # React Frontend Application
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ public/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.html
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ manifest.json                 # PWA manifest
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ favicon.ico
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÅ icons/                     # PWA icons
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ components/                # Reusable UI components
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ ui/                    # Base UI components
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Button.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Input.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Modal.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Card.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Badge.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Spinner.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ layout/                # Layout components
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Header.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Footer.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Sidebar.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Navigation.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ forms/                 # Form components
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ LoginForm.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ RegisterForm.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ IssueForm.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ CommentForm.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ maps/                  # Map-related components
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MapContainer.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ LocationPicker.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ IssueMarker.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ RadiusSelector.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÅ common/                # Common components
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ LoadingScreen.tsx
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ ErrorBoundary.tsx
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ NotFound.tsx
‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ ProtectedRoute.tsx
‚îÇ   ‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ pages/                     # Page components
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ HomePage.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ LoginPage.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ RegisterPage.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DashboardPage.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ IssueDetailsPage.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ReportIssuePage.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProfilePage.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ AdminDashboard.tsx
‚îÇ   ‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ features/                  # Feature-based modules
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ auth/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useAuth.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ useLogin.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ authService.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ types/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ auth.types.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ issues/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ IssueCard.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ IssueGrid.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ IssueFilters.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ StatusBadge.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ PriorityIndicator.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useIssues.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useIssueFilters.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ useCreateIssue.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ issuesService.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ types/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ issue.types.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ notifications/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ NotificationBell.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ NotificationList.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ useNotifications.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ services/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ notificationService.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÅ location/
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ useGeolocation.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ useGeocode.ts
‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ services/
‚îÇ   ‚îÇ   ‚îÇ           ‚îî‚îÄ‚îÄ locationService.ts
‚îÇ   ‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ hooks/                     # Global custom hooks
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useLocalStorage.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useDebounce.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useInfiniteScroll.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ useImageUpload.ts
‚îÇ   ‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ services/                  # API and external services
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api.ts                    # Axios/fetch configuration
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ supabase.ts               # Supabase client
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ storage.ts                # File upload service
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ websocket.ts              # Real-time subscriptions
‚îÇ   ‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ store/                     # State management
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts                  # Store configuration
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ authStore.ts              # Authentication state
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ issuesStore.ts            # Issues state
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ filtersStore.ts           # Filter state
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ notificationStore.ts      # Notification state
‚îÇ   ‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ utils/                     # Utility functions
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ constants.ts              # App constants
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ formatters.ts             # Data formatters
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ validators.ts             # Form validation
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ helpers.ts                # General helpers
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ dateUtils.ts              # Date utilities
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ geoUtils.ts               # Geographic utilities
‚îÇ   ‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ types/                     # TypeScript type definitions
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts                  # Common types
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api.types.ts              # API response types
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ database.types.ts         # Database types (auto-generated)
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ global.d.ts               # Global type declarations
‚îÇ   ‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ styles/                    # Global styles
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ globals.css               # Global CSS
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components.css            # Component-specific styles
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ tailwind.css              # Tailwind imports
‚îÇ   ‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ assets/                    # Static assets
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ images/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ icons/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÅ fonts/
‚îÇ   ‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ App.tsx                       # Main App component
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ main.tsx                      # App entry point
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ vite-env.d.ts                 # Vite type definitions
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ package.json                   # Dependencies
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ tsconfig.json                  # TypeScript config
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ tailwind.config.js             # Tailwind CSS config
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ vite.config.ts                 # Vite configuration
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ .env.local                     # Environment variables
‚îÇ   ‚îî‚îÄ‚îÄ üìÑ .env.example                   # Environment template
‚îÇ
‚îú‚îÄ‚îÄ üìÅ backend/                           # Backend Services (Optional - if not using Supabase Edge Functions)
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ routes/                    # API routes
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ middleware/                # Express middleware
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ controllers/               # Route controllers
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ services/                  # Business logic
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ utils/                     # Backend utilities
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ app.ts                        # Express app setup
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ package.json
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ tsconfig.json
‚îÇ   ‚îî‚îÄ‚îÄ üìÑ .env
‚îÇ
‚îú‚îÄ‚îÄ üìÅ database/                          # Database related files
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ migrations/                    # Database migrations
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ 001_initial_schema.sql
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ 002_add_indexes.sql
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ 003_add_rls_policies.sql
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ seeds/                         # Seed data
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ categories.sql
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ sample_users.sql
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ functions/                     # Database functions
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ get_issues_within_radius.sql
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ update_issue_priority.sql
‚îÇ   ‚îÇ
‚îÇ   ‚îî‚îÄ‚îÄ schema.sql                        # Complete schema file
‚îÇ
‚îú‚îÄ‚îÄ üìÅ docs/                              # Documentation
‚îÇ   ‚îú‚îÄ‚îÄ API.md                            # API documentation
‚îÇ   ‚îú‚îÄ‚îÄ DEPLOYMENT.md                     # Deployment guide
‚îÇ   ‚îú‚îÄ‚îÄ CONTRIBUTING.md                   # Contribution guidelines
‚îÇ   ‚îî‚îÄ‚îÄ ARCHITECTURE.md                   # System architecture
‚îÇ
‚îú‚îÄ‚îÄ üìÅ scripts/                           # Development scripts
‚îÇ   ‚îú‚îÄ‚îÄ setup-db.sh                       # Database setup script
‚îÇ   ‚îú‚îÄ‚îÄ deploy.sh                         # Deployment script
‚îÇ   ‚îî‚îÄ‚îÄ generate-types.js                 # Type generation script
‚îÇ
‚îú‚îÄ‚îÄ üìÅ tests/                             # Test files
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ unit/                          # Unit tests
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ integration/                   # Integration tests
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ e2e/                           # End-to-end tests
‚îÇ   ‚îî‚îÄ‚îÄ setup.ts                          # Test setup
‚îÇ
‚îú‚îÄ‚îÄ üìÑ README.md                          # Project documentation
‚îú‚îÄ‚îÄ üìÑ .gitignore                         # Git ignore rules
‚îú‚îÄ‚îÄ üìÑ .env.example                       # Environment variables template
‚îú‚îÄ‚îÄ üìÑ docker-compose.yml                 # Local development setup
‚îú‚îÄ‚îÄ üìÑ package.json                       # Root package.json (monorepo)
‚îî‚îÄ‚îÄ üìÑ CONTEXT.txt                        # This documentation file

# Key Folder Structure Benefits:

## üéØ Feature-Based Organization
- **Modular Architecture**: Each feature (auth, issues, notifications) is self-contained
- **Scalability**: Easy to add new features without restructuring
- **Team Collaboration**: Multiple developers can work on different features simultaneously

## üîß Developer Experience
- **Clear Separation**: UI components, business logic, and data services are clearly separated
- **Reusability**: Common components and utilities are easily accessible
- **Type Safety**: Centralized type definitions with auto-generation from database schema

## üì± Production Ready
- **PWA Support**: Manifest and service worker configuration included
- **Environment Management**: Separate configs for development, staging, and production
- **Testing Structure**: Comprehensive testing setup with unit, integration, and E2E tests

## üöÄ Deployment Considerations
- **Docker Support**: Container configuration for consistent deployments
- **Database Management**: Migration scripts and seed data for easy setup
- **CI/CD Ready**: Scripts and configuration for automated deployments
```

---

## üì± Screen Specifications

| Screen | Purpose | Key Components |
|--------|---------|----------------|
| **Home** | Public issue discovery | Filter bar, issue grid, pagination |
| **Login** | User authentication | Login form, registration link |
| **Register** | New user onboarding | Registration form, validation |
| **Dashboard** | Authenticated user hub | Profile, tabs, action buttons |
| **Report Issue** | Issue submission | Multi-step form, map, upload |
| **Issue Details** | Comprehensive issue view | Gallery, timeline, activity feed |

---

## üöÄ Development Roadmap

### Phase 1: Core MVP
- [ ] User authentication system
- [ ] Basic issue reporting and viewing
- [ ] Location-based filtering
- [ ] Responsive design implementation

### Phase 2: Enhanced Features
- [ ] Advanced filtering and search
- [ ] Real-time status updates
- [ ] Image optimization and management
- [ ] Admin dashboard for authorities

### Phase 3: Community Features
- [ ] Push notifications
- [ ] Social sharing capabilities
- [ ] User engagement gamification
- [ ] AI-powered duplicate detection

### Phase 4: Advanced Analytics
- [ ] Issue trend analysis
- [ ] Community engagement metrics
- [ ] Performance dashboards
- [ ] Predictive issue modeling

---

## üîÆ Future Enhancements

### User Experience
- **Smart Notifications**: Real-time updates on issue progress
- **Social Integration**: Share issues across social media platforms
- **Offline Support**: Progressive Web App capabilities
- **Voice Reporting**: Audio-to-text issue descriptions

### Community Engagement
- **Gamification System**: Badges and points for active community members
- **Voting Mechanism**: Community priority voting on reported issues
- **Discussion Forums**: Dedicated spaces for community dialogue
- **Volunteer Coordination**: Connect citizens with local improvement initiatives

### Advanced Technology
- **AI-Powered Features**:
  - Automatic issue categorization
  - Duplicate detection and merging
  - Sentiment analysis of community feedback
  - Predictive maintenance recommendations

- **IoT Integration**: Connect with smart city sensors and devices
- **Blockchain Verification**: Immutable issue reporting and resolution tracking

---

## üìä Success Metrics

### User Engagement
- Monthly active users
- Issue reporting frequency
- Community interaction rates
- User retention metrics

### Issue Resolution
- Average resolution time by category
- Authority response rates
- Community satisfaction scores
- Issue recurrence tracking

### Platform Performance
- Page load times
- Mobile usability scores
- System uptime and reliability
- API response times

---

## ü§ù Contributing

CivicTrack is designed to be a community-driven platform. We welcome contributions from developers, designers, and civic-minded individuals who want to improve local governance and community engagement.

### Getting Started
1. Fork the repository
2. Set up local development environment
3. Review contribution guidelines
4. Submit pull requests with clear descriptions

---

*Built with ‚ù§Ô∏è for stronger communities and better civic engagement.*
